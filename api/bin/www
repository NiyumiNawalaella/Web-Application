
// /**
//  * Module dependencies.
//  */

// var app = require('../../src/app/pages/user-chat');
// var debug = require('debug')('angular2-nodejs:server');
// var http = require('http');

// /**
//  * Get port from environment and store in Express.
//  */

// var port = normalizePort(process.env.PORT || '4200');
// app.set('port', port);

// /**
//  * Create HTTP server.
//  */

// var server = http.createServer(app);

// var io = require('socket.io').listen(server);

// io.on('connection',(socket)=>{

//     console.log('new connection made.');


//     socket.on('join', function(data){
//       // A person is joining 
//       socket.join(data.room);

//       console.log(data.user + 'joined the room : ' + data.room);

//       //it will  broadcast a message except to the person who is joining
//       socket.broadcast.to(data.room).emit('new user joined', {user:data.user, message:'has joined this room.'});
//     });


//     socket.on('leave', function(data){

//       console.log(data.user + 'left the room : ' + data.room);
// //rooms are like segements, the user will be join and leave at any time. they can also be grouped together
//       socket.broadcast.to(data.room).emit('left room', {user:data.user, message:'has left this room.'});

//       //allowing the others to get notified when a person leaves a room.
//       socket.leave(data.room);
//     });

//     socket.on('message',function(data){
// //to send the message to the whole room along with the sender
//       io.in(data.room).emit('new message', {user:data.user, message:data.message});
//     })
// });

// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
